#Область ПеременныеМодуля 

Перем Кэш;

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДостпныеКоманды.Очистить();
	
	ЗаполнитьТаблицуДоступныхКоманд();
	
	ЗаполнитьТаблицуМетодовОбъектов();
	   	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка 
		
		ВДеревоЗначенийНаСервере();
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		
		Сообщить(ПодробноеПредставлениеОшибки(Инфо));
		
	КонецПопытки;
	      		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ВТаблицуЗначенийНаСервере("");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Элементы.ДеревоЩагиСценария.ТекущиеДанные.ПараметрыХранилище = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры		= Новый Структура("Форма", ЭтаФорма);
	ОписаниеОповещения	= Новый ОписаниеОповещения("ВыборКаталогаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДиалогОткрытияФайла						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.МножественныйВыбор	= Ложь;
	ДиалогОткрытияФайла.Заголовок			= "Выберите каталог";
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталогаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено И Результат.Количество() Тогда
		
		Объект.КаталогВыгрузки = Результат[0];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ЗагрузитьТест(Команда)
	
	ТекущиеДанные = Элементы.Тесты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйИдентификаторТеста = ТекущиеДанные.Идентификатор;
	
	ВДеревоЗначенийНаСервере(ВыбранныйИдентификаторТеста);
	
	ТекущийИдентификаторТеста = ВыбранныйИдентификаторТеста;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеКЗагрузке(Команда)
	
	ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработатьВыбранныеФайлыДанныеКЗагрузке", ЭтаФорма);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок     	   = "Выберите файл: ";
	ДиалогОткрытияФайла.Фильтр 		 	   = "Текст(*.XML)|*.XML";
	
	НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, ЭтаФорма.УникальныйИдентификатор);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеКЗагрузке(Команда)
	
	
	Текст = СтурктураДляЗаписи();
	
		ЗаписьXML = Новый ТекстовыйДокумент;
		ЗаписьXML.УстановитьТекст(Текст);
		
		ЗаписьXML.Записать(Объект.КаталогВыгрузки + "\UploadObjects.xml", "UTF-8");
			
		
		

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКВыгрузке(Команда)
	
	ОбновитьДанныеКВыгрузкеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГлавныйУзел(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийИдентификаторТеста) Тогда
		Возврат;
	КонецЕсли;

	ДанныеДерева = ДеревоЩагиСценария.ПолучитьЭлементы(); 
	
	НоваяСТрока = ДанныеДерева.Добавить();                                                              
	НоваяСТрока.Ид = Новый УникальныйИдентификатор();
	НоваяСТрока.ИдентификаторТеста = ТекущийИдентификаторТеста;
	     	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗависимыйУзел(Команда)
	
	Если ТекущийГлавныйУзел = Неопределено Или Не ЗначениеЗаполнено(ТекущийИдентификаторТеста) Тогда
		Возврат;
	КонецЕсли;
	             	
	ТекущаяСтрока       = ДеревоЩагиСценария.НайтиПоИдентификатору(ТекущийГлавныйУзел);
	НоваяСтрокаДерева   = ТекущаяСтрока.ПолучитьЭлементы().Добавить();
	
	НоваяСтрокаДерева.Ид = Новый УникальныйИдентификатор();
	НоваяСтрокаДерева.ИдРодителя = ТекущаяСтрока.Ид;
	НоваяСтрокаДерева.ИдентификаторТеста = ТекущийИдентификаторТеста;

	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВТаблицу(Команда)
	
	ВТаблицуЗначенийНаСервере(ТекущийИдентификаторТеста);
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВДерево(Команда)
	
	ВДеревоЗначенийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстМодуля(Команда)
	
	СгенерироватьТекстыМодуля();

КонецПроцедуры

#КонецОбласти

#Область СобытияДерева

&НаКлиенте
Процедура ДеревоЩагиСценарияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоЩагиСценарияКнопкаВызоваПараметровКоманды" Тогда
		
		ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
		
		ОткрытьФорму("ВнешняяОбработка.КонструкторМодульныхТестов.Форма.ФормаРеквизитовОбъектов",
			Новый Структура(
				"СсылкаНаОбъект, Хранилище",
				ТекущиеДанные.ОбъектКоманды,
				ТекущиеДанные.ПараметрыХранилище)
				, ЭтотОбъект);   	

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияОбъектКомандыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
	
	//Если ЭтоСсылочныйТип(ТекущиеДанные.ОбъектКоманды) Тогда
	//	
	//	ПредставлениеЗначения = ПолучитьИдентификаторПредставленияПоСсылке(ТекущиеДанные.ОбъектКоманды);

	//	ТекущиеДанные.ИмяПеременной =  ПредставлениеЗначения;
	//	
	//КонецЕсли;
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияТипОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ЗаполнитьСписокВыбораПоляТипОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагиСценарияКонтрольноеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
			
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияКомандаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;

	Элемент.СписокВыбора.Очистить();
	
	//ДанныеВыбора = Новый СписокЗначений;
	
	ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
	
	ЭтоПодчиненныйУзел = ЗначениеЗаполнено(ТекущиеДанные.ИдРодителя);
	
	Если ЭтоПодчиненныйУзел Тогда
		
		Для Каждого Команда из ДостпныеКоманды Цикл		
			
			Если Команда.ТипУзла <> "Подчиненный" Тогда
				Продолжить;
			КонецЕсли;
			           
			Элемент.СписокВыбора.Добавить(Команда.ИдентификаторКоманды, Команда.Представление);		
			
			//ДанныеВыбора.Добавить(Команда.ИдентификаторКоманды, Команда.Представление);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Команда из ДостпныеКоманды Цикл		
			
			Если Команда.ТипУзла = "Подчиненный" Тогда
				Продолжить;
			КонецЕсли;
			
			Элемент.СписокВыбора.Добавить(Команда.ИдентификаторКоманды, Команда.Представление);		
			//ДанныеВыбора.Добавить(Команда.ИдентификаторКоманды, Команда.Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущийГлавныйУзел = Неопределено
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ИдРодителя) Тогда		
		ТекущийГлавныйУзел = Элементы.ДеревоЩагиСценария.ТекущаяСтрока;
	Иначе		
		ТекущийГлавныйУзел = ДеревоЩагиСценария.НайтиПоИдентификатору(
			Элементы.ДеревоЩагиСценария.ТекущаяСтрока).ПолучитьРодителя().ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПоляТипОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ВыбранноеЗначение);
		
		ТекущиеДанные.ОписаниеТиповОбъекта = новый ОписаниеТипов(МассивТипов);
		
		ТекущиеДанные.ТипОбъекта = Строка(ВыбранноеЗначение);
		
		ТекущиеДанные.ОбъектКоманды = Новый (ВыбранноеЗначение);
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = "ЗначениеРеквизитаОбъекта" Тогда
		
		ОбъектГлавногоУзла = ОбъектГлавногоУзла();
		
		ТипРеквизита = ТипРеквизитаОбъекта(ОбъектГлавногоУзла, ВыбранноеЗначение);
		
		ТекущиеДанные.ОписаниеТиповОбъекта = ТипРеквизита;
		
		ТекущиеДанные.ОбъектКоманды = ЗначениеРеквизитаОбъекта(ОбъектГлавногоУзла, ВыбранноеЗначение);
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = "УстановитьЗначениеКонстанты" Тогда
		
		ОбъектГлавногоУзла = ОбъектГлавногоУзла();
		
		ТипКонстанты = ТипКонстанты(ВыбранноеЗначение);
		
		ТекущиеДанные.ОписаниеТиповОбъекта = ТипКонстанты;
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = "КоличествоСтрокТаблицыОбъекта" 
		Или ТекущиеДанные.ИдентификаторКоманды = "КоличествоДвиженийПоРегистру" Тогда
				
		ТекущиеДанные.ОписаниеТиповОбъекта = Новый ОписаниеТипов("Число"); 
		
		
	КонецЕсли;
	
	
	                                                 
	
	ТекущиеДанные.ТипОбъекта = Строка(ВыбранноеЗначение);
	 	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияКомандаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
	
	ТекущиеДанные.ИдентификаторКоманды = ВыбранноеЗначение;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияОбъектКомандыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
	
	Если ТекущиеДанные.ИдентификаторКоманды = ИдОстаткиПоРегиструНакопления 
		Или ТекущиеДанные.ИдентификаторКоманды = ИдОборотыПоРегиструНакопления  Тогда
		
		СтандартнаяОбработка = Ложь;  	
		      		
		РежимОстатков = ТекущиеДанные.ИдентификаторКоманды = ИдОстаткиПоРегиструНакопления;
		
		
		ОткрытьФорму("ВнешняяОбработка.КонструкторМодульныхТестов.Форма.ФормаОстаткиОборотыРегистрыНакопления",
			Новый Структура(
				"ИмяРегистра, Хранилище, РежимОстатков",
				ТекущиеДанные.ТипОбъекта,
				ТекущиеДанные.ПараметрыХранилище,
				РежимОстатков)
			, ЭтотОбъект); 					
			
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = ИдОстаткиПоРегиструБухгалтерии 
		Или ТекущиеДанные.ИдентификаторКоманды = ИдОборотыПоРегиструБухгалтерии  Тогда
		
		СтандартнаяОбработка = Ложь;  	
		      		
		РежимОстатков = ТекущиеДанные.ИдентификаторКоманды = ИдОстаткиПоРегиструБухгалтерии;
		
		ОткрытьФорму("ВнешняяОбработка.КонструкторМодульныхТестов.Форма.ФормаОстаткиОборотыРегистрыБухнгалтерии",
			Новый Структура(
				"ИмяРегистра, Хранилище, РежимОстатков",
				ТекущиеДанные.ТипОбъекта,
				ТекущиеДанные.ПараметрыХранилище,
				РежимОстатков)
			, ЭтотОбъект); 
			
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = ИдДанныеРегистраСведений  Тогда
		
		СтандартнаяОбработка = Ложь;  	
		      		
		РежимОстатков = ТекущиеДанные.ИдентификаторКоманды = ИдДанныеРегистраСведений;
		
		ОткрытьФорму("ВнешняяОбработка.КонструкторМодульныхТестов.Форма.ФормаНезависимыеРегистрыСведений",
			Новый Структура(
				"ИмяРегистра, Хранилище",
				ТекущиеДанные.ТипОбъекта,
				ТекущиеДанные.ПараметрыХранилище)
				, ЭтотОбъект);   			
				
				
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = "СоздатьДокумент" Или ТекущиеДанные.ИдентификаторКоманды = "СоздатьСправочник" Тогда
		
		СтандартнаяОбработка = Ложь; 
		
		ОткрытьФорму("ВнешняяОбработка.КонструкторМодульныхТестов.Форма.ФормаРеквизитовОбъектов",
			Новый Структура(
				"СсылкаНаОбъект, ТипОбъекта, Хранилище",
				ТекущиеДанные.ОбъектКоманды,
				ТекущиеДанные.ТипОбъекта,
				ТекущиеДанные.ПараметрыХранилище)
				, ЭтотОбъект);   	
			

	КонецЕсли;   			
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЗаполнитьСписокВыбораПоляТипОбъекта()
	
	Элементы.ДеревоЩагиСценарияТипОбъекта.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.ДеревоЩагиСценария.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Команда) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОКоманде = ПолучитьСведенияОКоманде(ТекущиеДанные.Команда);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(СведенияОКоманде.ОписаниеТипов) Тогда
	     	
		Для каждого ТипОграничения из СведенияОКоманде.ОписаниеТипов.Типы() Цикл
			
			ДанныеВыбора.Добавить(ТипОграничения, ТипОграничения);
			
		КонецЦикла;  
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = ИдОстаткиПоРегиструНакопления Тогда
		
		ДанныеВыбора = ПолучитьРегистрыНакопления(Истина);
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = ИдОборотыПоРегиструНакопления Тогда
		   
		ДанныеВыбора = ПолучитьРегистрыНакопления(Ложь);
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = ИдОстаткиПоРегиструБухгалтерии Тогда
		
		ДанныеВыбора = ПолучитьРегистрыБухгалтерии();
		                                		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = ИдОборотыПоРегиструБухгалтерии Тогда
		
		ДанныеВыбора = ПолучитьРегистрыБухгалтерии();
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = ИдДанныеРегистраСведений Тогда
		
		ДанныеВыбора = ПолучитьРегистрыСведенийНезависимые();  
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = "КоличествоДвиженийПоРегистру" Тогда
		
		ДанныеВыбора = ПолучитьРегистрыДвиженийДокумента(ОбъектГлавногоУзла());
	                                         		
	ИначеЕсли СведенияОКоманде.ОграничениеТипа = "РеквизитыОбъекта" Тогда
		 	
		ДанныеВыбора = ПолучитьРеквизитыОбъекта(ОбъектГлавногоУзла());
		
	ИначеЕсли СведенияОКоманде.ОграничениеТипа = "ТабличныеЧастиОбъекта" Тогда
		 	
		ДанныеВыбора = ПолучитьТабличныеЧастиОбъекта(ОбъектГлавногоУзла());
		
	ИначеЕсли СведенияОКоманде.ОграничениеТипа = "Константы" Тогда
		 	
		ДанныеВыбора = ПолучитьКонстанты();                                                         
		
	ИначеЕсли ТекущиеДанные.ИдентификаторКоманды = "ВыполнитьМетодОбъекта" Тогда
		
		ДанныеВыбора = ПолучитьМетодыОбъекта(ОбъектГлавногоУзла());

	КонецЕсли;
	
	ДанныеВыбора.СортироватьПоПредставлению();
	
	Для каждого Данные из ДанныеВыбора Цикл
		
		Элементы.ДеревоЩагиСценарияТипОбъекта.СписокВыбора.Добавить(Данные.Значение, Данные.Представление);
		
	КонецЦикла;
	

	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыбранныеФайлыДанныеКЗагрузке(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
 
    Если ПомещенныеФайлы = Неопределено Тогда
        Возврат;
    КонецЕсли;
 
    Для каждого ПереданныйФайл Из ПомещенныеФайлы Цикл
		ПрочитатьФайлДанныеКВыгрузкеНаСервере(ПереданныйФайл.Хранение, ПереданныйФайл.Имя);
	КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбранныеФайлыНаборТестов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
 
    Если ПомещенныеФайлы = Неопределено Тогда
        Возврат;
    КонецЕсли;
 
    Для каждого ПереданныйФайл Из ПомещенныеФайлы Цикл
		ПрочитатьФайлНаборТестовНаСервере(ПереданныйФайл.Хранение, ПереданныйФайл.Имя);
		
		Если Тесты.Количество() > 0 Тогда
			Тест = Тесты[0].Идентификатор;
			ТекущийИдентификаторТеста = Тест;
		КонецЕсли;
			
		ВДеревоЗначенийНаСервере(ТекущийИдентификаторТеста);
	КонецЦикла;
    
КонецПроцедуры
         

&НаСервере
Функция ПолучитьПредставлениеОбъектаКоманды(Значение, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных)
	
	ТипТекущегоЗначения = ТипЗнч(Значение);
	
	ПредставлениеЗначения = "";
	СтроковоеПредставление = "";
	
	Если ТипТекущегоЗначения = Тип("Число") Тогда
		
		ПредставлениеЗначения = Формат(Значение, "ЧРД=.; ЧН=; ЧГ=");			
		ПредставлениеЗначения = СтрЗаменить(ПредставлениеЗначения, Символы.НПП, "");
		
		СтроковоеПредставление = ПредставлениеЗначения;
		
	ИначеЕсли ТипТекущегоЗначения = Тип("Строка") Тогда
		
		ПредставлениеЗначения = Значение;
		СтроковоеПредставление = СтрШаблон("""%1""", ПредставлениеЗначения);
		
	ИначеЕсли ТипТекущегоЗначения = Тип("Дата") Тогда
		
		ПредставлениеЗначения = Формат(Значение, "ДФ=ггггММддЧЧммсс");
		СтроковоеПредставление = СтрШаблон("Дата('%1')", ПредставлениеЗначения);
		
	ИначеЕсли ТипТекущегоЗначения = Тип("Булево") Тогда
		
		ПредставлениеЗначения = ?(Значение = Истина, "Истина", "Ложь");
		СтроковоеПредставление = ПредставлениеЗначения;
	
	ИначеЕсли ТипТекущегоЗначения = Тип("Неопределено") Тогда
		
		ПредставлениеЗначения = Неопределено;
		СтроковоеПредставление = Неопределено;
		
	ИначеЕсли ТипТекущегоЗначения = Тип("ПланСчетовСсылка.Управленческий")
		И Значение.Предопределенный = Истина Тогда
		  		
		
		ПредставлениеЗначения = СтрШаблон("ПланыСчетов.Управленческий.%1",
							Значение.ИмяПредопределенныхДанных);
							
							
		СтроковоеПредставление = ПредставлениеЗначения;
	
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		
	
		
		ПолучитьИменаПеречисленияИЗначенияПеречисления(Значение);
		
		ДанныеПеречисления = ПолучитьИменаПеречисленияИЗначенияПеречисления(Значение);
							
		
		ПредставлениеЗначения = СтрШаблон("Перечисления.%1.%2",
							ДанныеПеречисления.ИмяПеречисления,
							ДанныеПеречисления.ИмяЗначенияПеречисления);
							
							
		СтроковоеПредставление = ПредставлениеЗначения;
		
	ИначеЕсли ЭтоСсылочныйТип(Значение) Тогда
		
		Если Метаданные.Справочники.Содержит(Значение.Метаданные()) И Значение.Предопределенный Тогда
			Парам1 = "Справочники." + Значение.Метаданные().Имя;
			Парам2 = Значение.ИмяПредопределенныхДанных;
		Иначе 						
			Парам1 = ИмяСтуркутрыВходящихДанных;
			Парам2 = УникальноеИмяПеременнойПоСсылке(Значение, МассивИспользованныхИменПеременных); 			            		
		КонецЕсли;
		
		СтроковоеПредставление = СтрШаблон("%1.%2", Парам1, Парам2);
		
		
		
	КонецЕсли;
	
	Возврат Новый Структура("ПредставлениеЗначения, СтроковоеПредставление", ПредставлениеЗначения, СтроковоеПредставление);
	
	
КонецФункции

&НаСервере
Функция ЭтоПеречисление(ЗначениеПроверки)
	
	Попытка
		Возврат ОбщегоНазначения.ВидОбъектаПоТипу(ТипЗнч(ЗначениеПроверки)) = "Перечисление";
	Исключение
		Возврат ложь;
		
	КонецПопытки;
	
	
КонецФункции

&НаСервере 
Функция ЭтоСсылочныйТип(ЗначениеПроверки)
	
	
	Возврат ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеПроверки);
	
КонецФункции

&НаСервере
Функция ПолучитьИменаПеречисленияИЗначенияПеречисления(ЗначениеПеречисления)
	

	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;

	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);

	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	
	Результат = Новый Структура("ИмяПеречисления, ИмяЗначенияПеречисления",
		ИмяПеречисления, ИмяЗначенияПеречисления);
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция ПолучитьТип(Документ, ИмяРеквизита)
	
	ТипРеквизита = ТипЗнч(Документ[ИмяРеквизита]);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(ТипРеквизита);
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитыОбъекта(СсылкаОбъект)
	
	Если Не СсылкаОбъект <> Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Мета = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаОбъект));
	
	Ключ = Мета.Имя + "Реквизиты";
	
	ЗначениеИзКеша = Кэш.Получить(Ключ);
	
	Если ЗначениеИзКеша = Неопределено Тогда
		
		ЗначениеИзКеша = Новый СписокЗначений;
		 	
		Для каждого Реквизит из Мета.Реквизиты Цикл
						
			ЗначениеИзКеша.Добавить(Реквизит.Имя, Реквизит.Имя);
						
		КонецЦикла;
		 		
		Кэш.Вставить(Ключ, ЗначениеИзКеша);
	КонецЕсли;
	
	Возврат ЗначениеИзКеша;
	
КонецФункции

&НаСервере 
Функция ПолучитьРегистрыДвиженийДокумента(СсылкаОбъект)
	
	Если Не СсылкаОбъект <> Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Мета = СсылкаОбъект.Метаданные();
	 	      	
	Ключ = Мета.Имя + "Движения";
	
	ЗначениеИзКеша = Кэш.Получить(Ключ);
	
	Если ЗначениеИзКеша = Неопределено Тогда
		
		ЗначениеИзКеша = Новый СписокЗначений;
		 	
		Для каждого РегистрДвижения из Мета.Движения Цикл
			
			Если Метаданные.РегистрыНакопления.Содержит(РегистрДвижения) Тогда
				ИмяРегистра = "РегистрНакопления";
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(РегистрДвижения) Тогда
				ИмяРегистра = "РегистрСведений";
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(РегистрДвижения) Тогда
				ИмяРегистра = "РегистрБухгалтерии";
			ИначеЕсли Метаданные.РегистрыРасчета.Содержит(РегистрДвижения) Тогда
				ИмяРегистра = "РегистрРасчета";
			КонецЕсли;
			
			
			ЗначениеИзКеша.Добавить(ИмяРегистра + "." + РегистрДвижения.Имя, ИмяРегистра + "." + РегистрДвижения.Имя);
						
		КонецЦикла;
		 		
		Кэш.Вставить(Ключ, ЗначениеИзКеша);
	КонецЕсли;
	
	Возврат ЗначениеИзКеша;
	
КонецФункции

&НаСервере
Функция ПолучитьТабличныеЧастиОбъекта(СсылкаОбъект)

	Если Не СсылкаОбъект <> Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	        	
	Мета = СсылкаОбъект.Метаданные();
	
	Ключ = Мета.Имя + "ТабличныеЧасти";
	
	ЗначениеИзКеша = Кэш.Получить(Ключ);
	
	Если ЗначениеИзКеша = Неопределено Тогда
		
		ЗначениеИзКеша = Новый СписокЗначений;
		 	
		Для каждого Реквизит из Мета.ТабличныеЧасти Цикл
						
			ЗначениеИзКеша.Добавить(Реквизит.Имя, Реквизит.Синоним);
						
		КонецЦикла;
		 		
		Кэш.Вставить(Ключ, ЗначениеИзКеша);
		
	КонецЕсли;
	
	Возврат ЗначениеИзКеша;
	    
КонецФункции

&НаСервере
Функция ПолучитьРегистрыНакопления(Остатки)
	
	Результат = Новый СписокЗначений;
	
	Для каждого Регистр из Метаданные.РегистрыНакопления Цикл
		
		Если Остатки = Истина 
			И Регистр.ВидРегистра <> Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить(Регистр.Имя, Регистр.Имя);
		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

&НаСервере
Функция ПолучитьРегистрыБухгалтерии()
	
	Результат = Новый СписокЗначений;
	
	Для каждого Регистр из Метаданные.РегистрыБухгалтерии Цикл
					
		Результат.Добавить(Регистр.Имя, Регистр.Имя);  
		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

&НаСервере
Функция ПолучитьРегистрыСведенийНезависимые()
	
	Результат = Новый СписокЗначений;
	
	Для каждого Регистр из Метаданные.РегистрыСведений Цикл
		    			
		Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		 
		Результат.Добавить(Регистр.Имя, Регистр.Имя);  
		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

&НаСервере
Функция ПолучитьКонстанты()
	
	Результат = Новый СписокЗначений;
	
	Для каждого Константа из Метаданные.Константы Цикл
					
		Результат.Добавить(Константа.Имя, Константа.Имя);  
		
	КонецЦикла;
	
	Возврат Результат;	

КонецФункции

&НаСервере
Функция ПолучитьМетодыОбъекта(СсылкаОбъект)
	
	Если Не СсылкаОбъект <> Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	ТипОбъекта = ТипЗнч(СсылкаОбъект);
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		
		ХMLПрефиксТипа = "DocumentRef";
		ПрефиксТипа = "ДокументСсылка";
		
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
		
		ХMLПрефикс = "CatalogRef";
		ПрефиксТипа = "СправочникСсылка";
		
	Иначе
		
		ВызватьИсключение("Ошибочный тип ссылки! ПолучитьМетодыОбъекта(СсылкаОбъект): поддерживаются только методы Документов и справочников!");
		
	КонецЕсли;		
		       	
	XMLТипСтрокой = XMLТипЗнч (СсылкаОбъект).ИмяТипа;
	     	
	ТипОбъектаСтрокой = СтрЗаменить(XMLТипСтрокой, ХMLПрефиксТипа + ".", "");
	 		
	Отбор = Новый Структура("ТипОбъекта, ИмяОбъекта", ПрефиксТипа, ТипОбъектаСтрокой);
	
	НайденныеМетоды = МетодыОбъектов.НайтиСтроки(Отбор);
	
	Для каждого Метод из НайденныеМетоды Цикл
					
		Результат.Добавить(Метод.ПредставлениеМетода, Метод.ИмяМетода);  
		
	КонецЦикла;
	
	Возврат Результат;	

КонецФункции

&НаСервере
Функция ПолучитьДанныеИзХранилища(ХранилищеДанных, ИдКоманды)
	
	СтруктураСериализации = Неопределено;
	
	Если ИдКоманды = ИдОстаткиПоРегиструНакопления Или
		ИдКоманды = ИдОборотыПоРегиструНакопления Тогда
		
		ИзХранилища = ХранилищеДанных.Получить();
		
		СтруктураСериализации = Новый Структура("ИмяРегистра, Параметры, Отбор, Ресурсы");
		                                  		
		ЗаполнитьЗначенияСвойств(СтруктураСериализации, ИзХранилища);
		                                  		
	Иначе
		
		ИзХранилища = ХранилищеДанных.Получить();
		
		СтруктураСериализации = ИзХранилища;
	                                  		
	КонецЕсли;          
	        	
	Возврат СтруктураСериализации;
	
КонецФункции

&НаСервере
Функция ТипРеквизитаОбъекта(ОбъектсСсылка, ИмяРеквизита)
	
	Метаданное = Метаданные.НайтиПоТипу(ТипЗнч(ОбъектсСсылка));
	
	
	Возврат Метаданное.Реквизиты[ИмяРеквизита].Тип;
	
КонецФункции

&НаСервере
Функция ТипКонстанты(ИмяКонстанты)
	                    	
	Метаданное = Метаданные.Константы.Найти(ИмяКонстанты);
	
	ТипКонстанты = Метаданное.Тип;
	
	Возврат ТипКонстанты;
	           	
КонецФункции

&НаСервере
Функция ОбъектГлавногоУзла()
	
	ОбъектГлавногоУзла 
			= ДеревоЩагиСценария.НайтиПоИдентификатору(ТекущийГлавныйУзел).ОбъектКоманды;
			
	Возврат ОбъектГлавногоУзла;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеКВыгрузкеНаСервере()
	
	//ВТаблицуЗначенийНаСервере(ТекущийИдентификаторТеста);
	
	ДанныеВыгрузкиОбъектов.Очистить();
	

	//
	//МассивОбъектов = Новый Массив;
	//
	//ИменнованныеОбъекты = Новый Соответствие; 
	//
	//Для каждого СтрокаШага из ШагиСценария Цикл

	//	Если Не ПустаяСтрока(СтрокаШага.ИмяПеременной) Тогда
	//		ИменнованныеОбъекты.Вставить(СтрокаШага.ОбъектКоманды, СтрокаШага.ИмяПеременной);
	//	КонецЕсли;
	//			
	//	ПолучитьОбъектыРекурсивно(СтрокаШага.ОбъектКоманды, МассивОбъектов, 0, 2); 		
	//	
	//КонецЦикла;
	//
	//
	//МассивИспользованныхИмен = Новый Массив;
	
	МассивИспользованныхИмен = ТаблицаИспользованныхСсылочныхОбъектов.Выгрузить(, "ИмяПеременной").ВыгрузитьКолонку("ИмяПеременной");
	
	МассивПодготовленныхОбъектов = Новый Массив;

	Для Каждого СтрокаТаблицы из ТаблицаИспользованныхСсылочныхОбъектов Цикл
		
		Если МассивПодготовленныхОбъектов.Найти(СтрокаТаблицы.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПодготовленныхОбъектов.Добавить(СтрокаТаблицы.Ссылка);
		
		НоваяСтрока = ДанныеВыгрузкиОбъектов.Добавить();
		
		НоваяСтрока.Ссылка = СтрокаТаблицы.Ссылка;
		НоваяСтрока.Метаданное = НоваяСтрока.Ссылка.Метаданные();
		НоваяСтрока.ИмяПеременной = СтрокаТаблицы.ИмяПеременной;
		
		
		
		
		МассивОбъектов = Новый Массив;
		
		ПолучитьОбъектыРекурсивно(НоваяСтрока.Ссылка, МассивОбъектов, 0, 2); 
		
		Для Каждого СвязанныйОбъект из МассивОбъектов Цикл
			
			Если МассивПодготовленныхОбъектов.Найти(СвязанныйОбъект) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПодготовленныхОбъектов.Добавить(СвязанныйОбъект);
		
			НоваяСтрока = ДанныеВыгрузкиОбъектов.Добавить();
		
			НоваяСтрока.Ссылка = СвязанныйОбъект;
			НоваяСтрока.Метаданное = СвязанныйОбъект.Метаданные();
			НоваяСтрока.ИмяПеременной = УникальноеИмяПеременнойПоСсылке(СвязанныйОбъект, МассивИспользованныхИмен);

			
		КонецЦикла;
		
	КонецЦикла;
	
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбъектыРекурсивно(СсылкаНаОбъект, МассивОбъектов, ТекущийУровеньРекурсии, МаксУровеньРекурсии) 
	
	Если ЭтоПеречисление(СсылкаНаОбъект) Или НЕ ЭтоСсылочныйТип(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеСсылки = СсылкаНаОбъект.Метаданные();

		
	ЭтоДокумент 	= Метаданные.Документы.Содержит(МетаданныеСсылки);
	ЭтоСправочник 	= Метаданные.Справочники.Содержит(МетаданныеСсылки);
	ЭтоПланСчетов 	= Метаданные.ПланыСчетов.Содержит(МетаданныеСсылки);
	
	ЭтоПланВыдовХарактеристик = Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеСсылки);


	Если ЭтоДокумент 
			//Или (ЭтоСправочник И Не СсылкаНаОбъект.Предопределенный) 
			Или (ЭтоСправочник) 
			Или (ЭтоПланСчетов И Не СсылкаНаОбъект.Предопределенный) 
			Или (ЭтоПланВыдовХарактеристик И Не СсылкаНаОбъект.Предопределенный) Тогда
		      		
		Если МассивОбъектов.Найти(СсылкаНаОбъект) = Неопределено Тогда		
			МассивОбъектов.Добавить(СсылкаНаОбъект);		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущийУровеньРекурсии >= МаксУровеньРекурсии Тогда
		Возврат;
	КонецЕсли;
	
	
	
	Если ЭтоДокумент Или ЭтоСправочник Тогда
				
		Для каждого РеквизитОбъекта из МетаданныеСсылки.Реквизиты Цикл
			
			ЗначениеРеквизита = СсылкаНаОбъект[РеквизитОбъекта.Имя];
			
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Или НЕ ЭтоСсылочныйТип(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;    
			
			
			ПолучитьОбъектыРекурсивно(ЗначениеРеквизита, МассивОбъектов, ТекущийУровеньРекурсии + 1, МаксУровеньРекурсии);
			
		КонецЦикла;
		
		Для каждого ТабличнаяЧастьОбъекта из МетаданныеСсылки.ТабличныеЧасти Цикл
			
			Для каждого РеквизитОбъекта из ТабличнаяЧастьОбъекта.Реквизиты Цикл
				
				Для каждого СтрокаТаблицыОбъекта из СсылкаНаОбъект[ТабличнаяЧастьОбъекта.Имя] Цикл
					
					ЗначениеРеквизита = СтрокаТаблицыОбъекта[РеквизитОбъекта.Имя];
					
					Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Или НЕ ЭтоСсылочныйТип(ЗначениеРеквизита) Тогда
						Продолжить;
					КонецЕсли;     			               			
					
					ПолучитьОбъектыРекурсивно(ЗначениеРеквизита, МассивОбъектов, ТекущийУровеньРекурсии + 1, МаксУровеньРекурсии);
					     					
				КонецЦикла;
				         				
			КонецЦикла; 
			
		КонецЦикла; 
		
	ИначеЕсли ЭтоПланСчетов Тогда
		
	ИначеЕсли ЭтоПланВыдовХарактеристик Тогда
		
	Иначе
				
		ВызватьИсключение("Необрабатываеммый тип ссылки");
			
	КонецЕсли;          	
	
КонецПроцедуры

&НаСервере
Функция СтурктураДляЗаписи()
	
	ЗаписьXML = Новый ЗаписьXML;

    ЗаписьXML.УстановитьСтроку();
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("Версия", "1.0");
	ДанныеДляЗаписи.Вставить("Данные", ДанныеВыгрузкиОбъектов.Выгрузить());
	
    СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеДляЗаписи);
	                           		
    СтрокаXML = ЗаписьXML.Закрыть();
	       
	
	Возврат СтрокаXML;

КонецФункции

&НаСервере
Процедура ЗагрузитьСтурктуру(ЧтениеXML)
	

	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлДанныеКВыгрузкеНаСервере(Адрес, ИмяФайла) 
	
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат;
	КонецЕсли;	
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	ПутьКФайлу = КаталогВременныхФайлов() + ИмяФайла; 
	
	ДвоичныеДанные.Записать(ПутьКФайлу);

	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ДанныеКЗагрузке = Сериализатор.ПрочитатьXML(ЧтениеXML, Тип("Структура"));

	ДанныеВыгрузкиОбъектов.Очистить();
	ДанныеВыгрузкиОбъектов.Загрузить(ДанныеКЗагрузке.Данные);
	
	ЧтениеXML.Закрыть();

	УдалитьФайлы(ПутьКФайлу);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаборТестовНаСервере(Адрес, ИмяФайла) 
	
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат;
	КонецЕсли;	
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	
	ПутьКФайлу = КаталогВременныхФайлов() + ИмяФайла; 
	
	ДвоичныеДанные.Записать(ПутьКФайлу);

	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ДанныеКЗагрузке = Сериализатор.ПрочитатьXML(ЧтениеXML, Тип("Структура"));

	ШагиСценария.Очистить();
	Тесты.Очистить();
	
	НаборТестовИмя = ДанныеКЗагрузке.НаборТестовИмя;

	
	ШагиСценария.Загрузить(ДанныеКЗагрузке.ШагиСценария);
	Тесты.Загрузить(ДанныеКЗагрузке.Тесты);
	
	ЧтениеXML.Закрыть();

	УдалитьФайлы(ПутьКФайлу);
	
КонецПроцедуры


&НаСервере
Процедура ВТаблицуЗначенийНаСервере(ИдентификаторТеста)
		
	Дерево = РеквизитФормыВЗначение("ДеревоЩагиСценария");
	Таблица = РеквизитФормыВЗначение("ШагиСценария");
	
	Если Не ЗначениеЗаполнено(ИдентификаторТеста) Тогда
		Таблица.Очистить();
	Иначе
		Индекс = Таблица.Количество() - 1; 
		
		Пока Индекс >= 0 Цикл 
			Если Таблица[Индекс].ИдентификаторТеста = ИдентификаторТеста Тогда 
				Таблица.Удалить(Индекс); 
			КонецЕсли; 
			Индекс = Индекс - 1; 
		КонецЦикла;
		
	КонецЕсли;
	
	
	ПреобразоватьВТаблицуЗначений(Дерево, Таблица, "", ИдентификаторТеста);

	ЗначениеВРеквизитФормы(Таблица, "ШагиСценария");
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЩагиСценария");
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьВТаблицуЗначений(Дерево, Таблица, Ид, ИдентификаторТеста)
	
	Для Каждого тСтр Из Дерево.Строки Цикл
		нСтр = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр, тСтр);
			
		Если тСтр.Строки.Количество() > 0 Тогда
			ПреобразоватьВТаблицуЗначений(тСтр, Таблица, тСтр.Ид, ИдентификаторТеста);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВДеревоЗначенийНаСервере(ИдентификаторТеста = "")
	
	Дерево 	= РеквизитФормыВЗначение("ДеревоЩагиСценария");
	Таблица = РеквизитФормыВЗначение("ШагиСценария");
	                  
					  
	Дерево.Строки.Очистить();
	
	ПреобразоватьВДеревоЗначений(Дерево, Таблица, "", ИдентификаторТеста);
	                	
	ЗначениеВРеквизитФормы(Таблица, "ШагиСценария");
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЩагиСценария"); 
	
КонецПроцедуры
 
&НаСервере
Процедура ПреобразоватьВДеревоЗначений(Дерево, Таблица, Ид, ИдентификаторТеста)
		
	Поиск = Новый Структура("ИдРодителя", Ид);
	
	Если Не ПустаяСтрока(ИдентификаторТеста) Тогда
		Поиск.Вставить("ИдентификаторТеста", ИдентификаторТеста);
	КонецЕсли;
		
	тМассив = Таблица.НайтиСтроки(Поиск);
   
   Для Каждого тСтр Из тМассив Цикл
      нСтр = Дерево.Строки.Добавить();
	  ЗаполнитьЗначенияСвойств(нСтр, тСтр);
      ПреобразоватьВДеревоЗначений(нСтр, Таблица, тСтр.Ид, ИдентификаторТеста);
  КонецЦикла;
  
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДоступныхКоманд()
	
	//ТипыУзлов
	//Родительский
	//Подчиненный
	//Независимый
	
	
	//НоваяСтрока = ДостпныеКоманды.Добавить();
	//НоваяСтрока.ИдентификаторКоманды = "ВыполнитьМетодКонфигурации";
	//НоваяСтрока.Представление = "Выполнить функцию конфигурации";
	//НоваяСтрока.ОграничениеТипа = "";
	//НоваяСтрока.Вид = "Метод";
	//НоваяСтрока.ТипУзла = "Главный";
	//                                                
	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "УстановитьЗначениеКонстанты";
	НоваяСтрока.Представление = "Установить значение константы";
	НоваяСтрока.ОграничениеТипа = "Константы";
	НоваяСтрока.СпециальныйТип = Истина;
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Независимый";

	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = ИдОстаткиПоРегиструБухгалтерии;
	НоваяСтрока.Представление = "Остатки по регистру бухгалтерии";
	НоваяСтрока.ОграничениеТипа = "РегистрБухгалтерииОстатки";
	НоваяСтрока.СпециальныйТип = Истина;
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Независимый";
	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = ИдОборотыПоРегиструБухгалтерии;
	НоваяСтрока.Представление = "Обороты по регистру бухгалтерии";
	НоваяСтрока.ОграничениеТипа = "РегистрБухгалтерииОбороты";
	НоваяСтрока.СпециальныйТип = Истина;
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Независимый";

	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = ИдОстаткиПоРегиструНакопления;
	НоваяСтрока.Представление = "Остатки по регистру накопления";
	НоваяСтрока.ОграничениеТипа = "РегистрыНакопленияОстатки";
	НоваяСтрока.СпециальныйТип = Истина;
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Независимый";
	НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов(Неопределено);

	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = ИдОборотыПоРегиструНакопления;
	НоваяСтрока.Представление = "Обороты по регистру накопления";
	НоваяСтрока.ОграничениеТипа = "РегистрыНакопленияОбороты";
	НоваяСтрока.СпециальныйТип = Истина;
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Независимый";
	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = ИдДанныеРегистраСведений;
	НоваяСтрока.Представление = "Данные независимого регистра сведений";
	НоваяСтрока.ОграничениеТипа = "РегистрыСведенийНезависимые";
	НоваяСтрока.СпециальныйТип = Истина;
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Независимый";

	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "ПолучитьДокументИзСтруктуры";
	НоваяСтрока.Представление = "Получить объект из структуры";
	НоваяСтрока.ОграничениеТипа = "ДокументыВсеСсылки";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Родительский";
	НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов(Документы.ТипВсеСсылки());

	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "ПолучитьДокументИзСтруктурыИПровести";
	НоваяСтрока.Представление = "Получить документ и выполнить проведение ";
	НоваяСтрока.ОграничениеТипа = "ДокументыВсеСсылки";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Независимый";
	НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "СоздатьДокумент";
	НоваяСтрока.Представление = "Создать документ";
	НоваяСтрока.ОграничениеТипа = "ДокументыВсеСсылки";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Родительский";
	НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов(Документы.ТипВсеСсылки());

	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "СоздатьСправочник";
	НоваяСтрока.Представление = "Создать документ";
	НоваяСтрока.ОграничениеТипа = "СправочникиВсеСсылки";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Родительский";
	НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов(Справочники.ТипВсеСсылки());

	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "ЗаписатьИПровестиПоУУ";
	НоваяСтрока.Представление = "Провести документ УУ";
	НоваяСтрока.ОграничениеТипа = "ДокументыВсеСсылки";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Подчиненный";  	
	НоваяСтрока.ОписаниеТипов = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "ЗаписатьИПровестиПоБезУУ";
	НоваяСтрока.Представление = "Провести документ (Без УУ)";
	НоваяСтрока.ОграничениеТипа = "ДокументыВсеСсылки";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Подчиненный";
	

	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "КоличествоСтрокТаблицыОбъекта";
	НоваяСтрока.Представление = "Количество строк таблицы";
	НоваяСтрока.ОграничениеТипа = "ТабличныеЧастиОбъекта";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Подчиненный";

	
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "ЗначениеРеквизитаОбъекта";
	НоваяСтрока.Представление = "Значение реквизита";
	НоваяСтрока.ОграничениеТипа = "РеквизитыОбъекта";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Подчиненный";
	
	//НоваяСтрока = ДостпныеКоманды.Добавить();
	//НоваяСтрока.ИдентификаторКоманды = "КонтрольДвижений";
	//НоваяСтрока.Представление = "Контроль движений";
	//НоваяСтрока.ОграничениеТипа = "РегистрыДвижений";
	//НоваяСтрока.Вид = "Утверждение";
	//НоваяСтрока.ТипУзла = "Подчиненный";

	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "КоличествоДвиженийПоРегистру";
	НоваяСтрока.Представление = "КоличествоДвиженийПоРегистру";
	НоваяСтрока.ОграничениеТипа = "РегистрыДвижений";
	НоваяСтрока.Вид = "Утверждение";
	НоваяСтрока.ТипУзла = "Подчиненный";
	//
	НоваяСтрока = ДостпныеКоманды.Добавить();
	НоваяСтрока.ИдентификаторКоманды = "ВыполнитьМетодОбъекта";
	НоваяСтрока.Представление = "Выполнить метод объекта";
	НоваяСтрока.ОграничениеТипа = "ВсеСсылки";
	НоваяСтрока.Вид = "Метод";
	НоваяСтрока.ТипУзла = "Подчиненный";

	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТаблицуМетодовОбъектов()
	
	МакетТаблицыМетодов = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПроцедурыФункцииОбъектов"); 
	      	
	ПоследняяСтрока = МакетТаблицыМетодов.ВысотаТаблицы;
	ПоследняяКолонка = МакетТаблицыМетодов.ШиринаТаблицы;
	ОбластьЯчеек = МакетТаблицыМетодов.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка); 
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);  
	
	ПостроительОтчета = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	ПостроительОтчета.Выполнить();
	
	МетодыОбъектов.Загрузить(ПостроительОтчета.Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура СгенерироватьТекстыМодуля()
	
	ТекстМодуля.Очистить();
	
	МассивИспользованныхИменПеременных = Новый Массив;
	ТаблицаИспользованныхСсылочныхОбъектов.Очистить();
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ШаблонТекстаМодуля");
	ТекстШаблонаМодуля = Макет.ПолучитьТекст();
	
	ТабДок = Новый ТекстовыйДокумент;
	
	//Тесты
	
	Для Каждого ТестОбработки из Тесты Цикл 		
		ТабДок.ДобавитьСтроку("");
		
		Шаблон = "Параметры = ПараметрыСценария(""%1_scenario"");
		|НаборТестов.Добавить(""%1"", Параметры, ""%2"");";   		
		
		Текст = СтрШаблон(Шаблон, ТестОбработки.ИмяТеста, ТестОбработки.Описание);
		
		ТабДок.ДобавитьСтроку(Текст);      		
	КонецЦикла;
	
	
	ТекстШаблонаМодуля = СтрЗаменить(ТекстШаблонаМодуля, "###ШАБЛОН_НАБОРЫ_ТЕСТОВ###", ТабДок.ПолучитьТекст());
	
	
	ИмяСтуркутрыВходящихДанных = "СтруктураВходящихДанных";
	
	ТекстФункций = Новый ТекстовыйДокумент;
	
	Дерево = РеквизитФормыВЗначение("ДеревоЩагиСценария");
	
	Для каждого ТестОбработки из Тесты Цикл
		
		ИдентификаторТеста = ТестОбработки.Идентификатор;
		
		Отбор = Новый Структура("ИдентификаторТеста", ИдентификаторТеста);
		
		
		ТекстФункций.ДобавитьСтроку(""); 
		ТекстФункций.ДобавитьСтроку(СтрШаблон("Процедура %1(Параметры) Экспорт", ТестОбработки.ИмяТеста));	        
		ТекстФункций.ДобавитьСтроку("");		
		ТекстФункций.ДобавитьСтроку(СтрШаблон("ЗаполнитьСтруктуруВходящихДанныхИзМакета(""ИсходныеДанные_%1"");", ТестОбработки.ИмяТеста));
		ТекстФункций.ДобавитьСтроку("");
		
		
		Для Каждого СтрокаДерева из Дерево.Строки.НайтиСтроки(Отбор, Истина) Цикл
			
			СведенияОКоманде = ПолучитьСведенияОКоманде(СтрокаДерева.ИдентификаторКоманды);
			
			Если СведенияОКоманде.ТипУзла = "Независимый" Тогда
				
				Если СтрокаДерева.ИдентификаторКоманды = "УстановитьЗначениеКонстанты" Тогда
					
					ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(СтрокаДерева.ОбъектКоманды, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
					
					ТекстУстановитьЗначениеКонстанты = СтрШаблон("Константы.%1.Установить(%2);",
					СтрокаДерева.ТипОбъекта, ПредставлениеЗначения.СтроковоеПредставление);
					
					ТекстФункций.ДобавитьСтроку("");
					
					ТекстФункций.ДобавитьСтроку(ТекстУстановитьЗначениеКонстанты);  
					
					ТекстФункций.ДобавитьСтроку("");
					
				ИначеЕсли СтрокаДерева.Команда = "ПолучитьДокументИзСтруктурыИПровести" Тогда
					
					ПредставлениеСсылкиОбъекта = ПолучитьУникальноеИмяПеременной(СтрокаДерева.ОбъектКоманды, МассивИспользованныхИменПеременных);
					
					ТекстФункций.ДобавитьСтроку(
					СтрШаблон("ДокументОбъект = %1.%2.ПолучитьОбъект();",
					ИмяСтуркутрыВходящихДанных,
					ПредставлениеСсылкиОбъекта));
					
					Текст = "ВыполнитьПроведениеДокумента(ДокументОбъект, Истина);";
					
					ТекстФункций.ДобавитьСтроку(Текст);
					ТекстФункций.ДобавитьСтроку("");
					
					  					
				ИначеЕсли СтрокаДерева.ИдентификаторКоманды = ИдДанныеРегистраСведений Тогда
					
					ДанныеРегистра = ПолучитьДанныеИзХранилища(СтрокаДерева.ПараметрыХранилище, ИдДанныеРегистраСведений);
					
					
					ТекстКоманды = ТекстКоманды_ДанныеРегистраСведений(ИмяСтуркутрыВходящихДанных, СтрокаДерева, ДанныеРегистра, МассивИспользованныхИменПеременных);
					
					Если ДанныеРегистра.ТаблицаДанных.Количество() > 5 Тогда
						
						ИдМетода = Строка(Новый УникальныйИдентификатор());
						
						НовыйСлужебнаяПроцедура = ТаблицаСлужебныхПроцедурыИФункции.Добавить();
						
						НовыйСлужебнаяПроцедура.Ид = ИдМетода;
						НовыйСлужебнаяПроцедура.ТипМетода = "Процедура";
						НовыйСлужебнаяПроцедура.ПрефиксМетода = "ЗаполнитьДанныеРегистра";
						НовыйСлужебнаяПроцедура.ИмяМетода = ДанныеРегистра.ИмяРегистра;
						НовыйСлужебнаяПроцедура.ПараметрыМетода = ИмяСтуркутрыВходящихДанных;
						НовыйСлужебнаяПроцедура.ТекстМетода = ТекстКоманды;
						
						
						ТекстФункций.ДобавитьСтроку("");
						ТекстФункций.ДобавитьСтроку(ИдМетода);
						ТекстФункций.ДобавитьСтроку("");
						
						
					Иначе
						
						ТекстФункций.ДобавитьСтроку(ТекстКоманды);
						
					КонецЕсли;
					
				ИначеЕсли СтрокаДерева.ИдентификаторКоманды = ИдОборотыПоРегиструНакопления Тогда
					
					ТекстШаг = СтрШаблон("Шаг = ""Проверка оборотов по регистру накопления '%1'"";", СтрокаДерева.ТипОбъекта);
					
					ТекстПолученияОстатков = "РаботаСРегистрами.ОборотыПоРегиструНакопленияЗаПериод(""%1"",  %2, %3, %4);";
					
					ТекстФильтр = "Фильтр = новый Структура();";
					ТекстФильтр1 = "Фильтр.Вставить(""%1"", %2);";
					
					ТекстРесурсы = "Ресурсы = новый Структура();";
					ТекстРесурсы1 = "Ресурсы.Вставить(""%1"", %2);";
					
					ТекстРезультат = "РаботаСРегистрами.ПроверитьРезультат(Фильтр, Ресурсы, Ожидаем, Шаг);";
					
					ДанныеПодстановки = ПолучитьДанныеИзХранилища(СтрокаДерева.ПараметрыХранилище, ИдОстаткиПоРегиструНакопления);
					ДанныеПараметры = ДанныеПодстановки.Параметры;
					
					ПредставлениеНачалоПериода 	= ПолучитьПредставлениеОбъектаКоманды(ДанныеПараметры.НачалоПериода, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
					ПредставлениеКонецПериода 	= ПолучитьПредставлениеОбъектаКоманды(ДанныеПараметры.КонецПериода, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
					
					ПредставлениеПортфеля = СтрШаблон("%1.%2", ИмяСтуркутрыВходящихДанных, ПолучитьУникальноеИмяПеременной(ДанныеПараметры.Портфель, МассивИспользованныхИменПеременных));
					
					
					ТекстФункций.ДобавитьСтроку(ТекстШаг);  
					ТекстФункций.ДобавитьСтроку("");
					
					ТекстФункций.ДобавитьСтроку(
					СтрШаблон(ТекстПолученияОстатков,
					СтрокаДерева.ТипОбъекта, ПредставлениеНачалоПериода.СтроковоеПредставление, ПредставлениеКонецПериода.СтроковоеПредставление, ПредставлениеПортфеля));  
					
					
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстФильтр);
					
					Для каждого Отбор из ДанныеПодстановки.Отбор Цикл
						
						Если НЕ Отбор.Использовать Тогда
							Продолжить;
						КонецЕсли;
						
						ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(Отбор.ЗначениеИзмерения, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
						
						ТекстФункций.ДобавитьСтроку(
						СтрШаблон(ТекстФильтр1, Отбор.Измерение, ПредставлениеЗначения.СтроковоеПредставление)
						);
						
					КонецЦикла;
					
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстРесурсы);
					
					Для каждого Ресурс из ДанныеПодстановки.Ресурсы Цикл
						
						Если НЕ Ресурс.Использовать Тогда
							Продолжить;
						КонецЕсли;
						
						ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(Ресурс.Значение, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
						
						ТекстФункций.ДобавитьСтроку(СтрШаблон(ТекстРесурсы1, Ресурс.Ресурс, ПредставлениеЗначения.СтроковоеПредставление));
						
					КонецЦикла;
					
					
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстРезультат);
					ТекстФункций.ДобавитьСтроку("");
					
					
					
				ИначеЕсли СтрокаДерева.ИдентификаторКоманды = ИдОстаткиПоРегиструНакопления Тогда
					
					ТекстШаг = СтрШаблон("Шаг = ""Проверка остатков по регистру накопления %1"";", СтрокаДерева.ТипОбъекта);
					
					ТекстПолученияОстатков = "РаботаСРегистрами.ОстаткиПоРегиструНакопления(""%1"",  %2, %3);";
					
					ТекстФильтр = "Фильтр = новый Структура();";
					ТекстФильтр1 = "Фильтр.Вставить(""%1"", %2);";
					
					ТекстРесурсы = "Ресурсы = новый Структура();";
					ТекстРесурсы1 = "Ресурсы.Вставить(""%1"", %2);";
					
					ТекстРезультат = "РаботаСРегистрами.ПроверитьРезультат(Фильтр, Ресурсы, Ожидаем, Шаг);";
					
					ДанныеПодстановки = ПолучитьДанныеИзХранилища(СтрокаДерева.ПараметрыХранилище, ИдОстаткиПоРегиструНакопления);
					ДанныеПараметры = ДанныеПодстановки.Параметры;
					
					ПредставлениеПериода = СтрШаблон("Дата('%1')", Формат(ДанныеПараметры.Период, "ДФ=ггггММддЧЧммсс"));
					ПредставлениеПортфеля = СтрШаблон("%1.%2", ИмяСтуркутрыВходящихДанных, УникальноеИмяПеременнойПоСсылке(ДанныеПараметры.Портфель, МассивИспользованныхИменПеременных));
					
					
					ТекстФункций.ДобавитьСтроку( 
					ТекстШаг);  
					
					
					ТекстФункций.ДобавитьСтроку("");
					
					
					ТекстФункций.ДобавитьСтроку(
					СтрШаблон(ТекстПолученияОстатков,
					СтрокаДерева.ТипОбъекта, ПредставлениеПериода, ПредставлениеПортфеля)
					);  
					
					
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстФильтр);
					
					Для каждого Отбор из ДанныеПодстановки.Отбор Цикл
						
						Если НЕ Отбор.Использовать Тогда
							Продолжить;
						КонецЕсли;
						
						ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(Отбор.ЗначениеИзмерения, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
						
						ТекстФункций.ДобавитьСтроку(
						СтрШаблон(ТекстФильтр1, Отбор.Измерение, ПредставлениеЗначения.СтроковоеПредставление)
						);
						
					КонецЦикла;
					
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстРесурсы);
					
					Для каждого Ресурс из ДанныеПодстановки.Ресурсы Цикл
						
						Если НЕ Ресурс.Использовать Тогда
							Продолжить;
						КонецЕсли;
						
						ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(Ресурс.Значение, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
						
						ТекстФункций.ДобавитьСтроку(
						СтрШаблон(ТекстРесурсы1, Ресурс.Ресурс, ПредставлениеЗначения.СтроковоеПредставление)
						);
						
					КонецЦикла;
					
					
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстРезультат);
					ТекстФункций.ДобавитьСтроку("");
					
					
				ИначеЕсли СтрокаДерева.ИдентификаторКоманды = ИдОстаткиПоРегиструБухгалтерии Тогда
					
					ТекстИспользуемыеСчета 	= "СчетаОтбора = РегистрУПС.ИспользуемыеСчета(""%1"");";					
					ТекстОтбор				= "Отбор = Новый Структура(""Портфель"", %1);";
					ТекстПолученияОстатков 	= "РегистрУПС.ОстаткиПоСчетам(СчетаОтбора, Отбор, %1);";
					
					
					ТекстРезультат = "РегистрУПС.ПроверитьРезультат(ОтборРезультат, ОтборРесурсов, Ожидаем, Шаг, Истина);";
					
					ДанныеПодстановки = ПолучитьДанныеИзХранилища(СтрокаДерева.ПараметрыХранилище, ИдОстаткиПоРегиструБухгалтерии);
					ДанныеПараметры = ДанныеПодстановки.Параметры;
					
					ПредставлениеПериода = СтрШаблон("Дата('%1')", Формат(ДанныеПараметры.Период, "ДФ=ггггММддЧЧммсс"));
					ПредставлениеПортфеля = СтрШаблон("%1.%2", ИмяСтуркутрыВходящихДанных, УникальноеИмяПеременнойПоСсылке(ДанныеПараметры.Портфель, МассивИспользованныхИменПеременных));
					
					СчетаОтборов = Новый Массив;
					
					Для каждого СтрокаОтбора из ДанныеПодстановки.Отборы Цикл
						
						СчетСтрокой = Строка(СтрокаОтбора.Счет);
						
						Если СчетаОтборов.Найти(СчетСтрокой) = Неопределено Тогда
							СчетаОтборов.Добавить(СчетСтрокой);	
						КонецЕсли; 						
						
					КонецЦикла;
					
					
					
					
					Счета = СтрСоединить(СчетаОтборов, ", ");
					
					ТекстИспользуемыеСчета = СтрШаблон(ТекстИспользуемыеСчета, Счета);
					ТекстОтбор = СтрШаблон(ТекстОтбор, ПредставлениеПортфеля);
					
					ТекстПолученияОстатков = СтрШаблон(ТекстПолученияОстатков, ПредставлениеПериода);
					
					
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстИспользуемыеСчета);
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстОтбор);
					ТекстФункций.ДобавитьСтроку(ТекстПолученияОстатков);
					
					Для каждого СтрокаОтбора из ДанныеПодстановки.Отборы Цикл
						
						ТекстФункций.ДобавитьСтроку("");	
						ТекстШаг = СтрШаблон("Шаг = ""Проверка остатков по регистру бухгалтерии '%1' по счету '%2'"";", СтрокаДерева.ТипОбъекта, Строка(СтрокаОтбора.Счет));
						ТекстФункций.ДобавитьСтроку(ТекстШаг); 
						
						
						
						МассивТекстовОтбораРезультата = Новый Массив;
						МассивТекстовОтбораРезультата.Добавить("ОтборРезультат = Новый Структура();");
						
						МассивТекстовРесурсовРезультата = Новый Массив;
						МассивТекстовРесурсовРезультата.Добавить("ОтборРесурсов = Новый Структура();");
						
						МассивТекстовОтбораРезультата.Добавить(
						СтрШаблон("ОтборРезультат.Вставить(""Счет"", СчетаОтбора[""%1""]);", Строка(СтрокаОтбора.Счет)));
						
						
						
						Для каждого Отбор из СтрокаОтбора.Измерения Цикл
							
							МассивТекстовОтбораРезультата.Добавить(
							СтрШаблон("ОтборРезультат.Вставить(""%1"", %2.%3);", 
							Отбор.Ключ,
							ИмяСтуркутрыВходящихДанных,
							УникальноеИмяПеременнойПоСсылке(Отбор.Значение, МассивИспользованныхИменПеременных)));
							
						КонецЦикла;
						
						Для каждого Отбор из СтрокаОтбора.Ресурсы Цикл
							
							ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(
							Отбор.Значение, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
							
							МассивТекстовРесурсовРезультата.Добавить(
							СтрШаблон("ОтборРесурсов.Вставить(""%1"", %2);", 
							Отбор.Ключ,
							ПредставлениеЗначения.СтроковоеПредставление)); 
							
						КонецЦикла; 	
						
						ТекстФункций.ДобавитьСтроку("");
						
						ТекстФункций.ДобавитьСтроку(СтрСоединить(МассивТекстовОтбораРезультата, Символы.ПС));
						ТекстФункций.ДобавитьСтроку("");
						ТекстФункций.ДобавитьСтроку(СтрСоединить(МассивТекстовРесурсовРезультата, Символы.ПС));
						
						
						ТекстФункций.ДобавитьСтроку("");
						ТекстФункций.ДобавитьСтроку(ТекстРезультат);
						ТекстФункций.ДобавитьСтроку("");
						
						
					КонецЦикла;
					
					
					
				ИначеЕсли СтрокаДерева.ИдентификаторКоманды = ИдОборотыПоРегиструБухгалтерии Тогда
					
					ТекстШаг = СтрШаблон("Шаг = ""Проверка оборотов по регистру бухгалтерии '%1' по счету '%2'"";", СтрокаДерева.ТипОбъекта);
					
					
					
					ТекстИспользуемыеСчета 	= "СчетаОтбора = РегистрУПС.ИспользуемыеСчета(""%1"");";					
					ТекстОтбор				= "Отбор = Новый Структура(""Портфель"", %1);";
					ТекстПолученияОборотов 	= "РегистрУПС.ОборотыПоСчетам(СчетаОтбора, Отбор, %1, %2);";
					
					
					ТекстРезультат = "РегистрУПС.ПроверитьРезультат(ОтборРезультат, ОтборРесурсов, Ожидаем, Шаг, Истина);";
					
					ДанныеПодстановки = ПолучитьДанныеИзХранилища(СтрокаДерева.ПараметрыХранилище, ИдОборотыПоРегиструБухгалтерии);
					ДанныеПараметры = ДанныеПодстановки.Параметры;
					
					ПредставлениеНачалоПериода = СтрШаблон("Дата('%1')", Формат(ДанныеПараметры.НачалоПериода, "ДФ=ггггММддЧЧммсс"));
					ПредставлениеКонецПериода = СтрШаблон("Дата('%1')", Формат(ДанныеПараметры.КонецПериода, "ДФ=ггггММддЧЧммсс"));
					
					ПредставлениеПортфеля = СтрШаблон("%1.%2", ИмяСтуркутрыВходящихДанных, УникальноеИмяПеременнойПоСсылке(ДанныеПараметры.Портфель, МассивИспользованныхИменПеременных));
					
					
					СчетаОтборов = Новый Массив;
					
					Для каждого СтрокаОтбора из ДанныеПодстановки.Отборы Цикл
						
						СчетСтрокой = Строка(СтрокаОтбора.Счет);
						
						Если СчетаОтборов.Найти(СчетСтрокой) = Неопределено Тогда
							СчетаОтборов.Добавить(СчетСтрокой);	
						КонецЕсли; 						
						
					КонецЦикла;
					
					
					Счета = СтрСоединить(СчетаОтборов, ", ");
					
					ТекстИспользуемыеСчета = СтрШаблон(ТекстИспользуемыеСчета, Счета);
					ТекстОтбор = СтрШаблон(ТекстОтбор, ПредставлениеПортфеля);
					
					ТекстПолученияОборотов = СтрШаблон(ТекстПолученияОборотов, ПредставлениеНачалоПериода, ПредставлениеКонецПериода);
					
					ТекстФункций.ДобавитьСтроку(ТекстИспользуемыеСчета);
					ТекстФункций.ДобавитьСтроку("");
					ТекстФункций.ДобавитьСтроку(ТекстОтбор);
					ТекстФункций.ДобавитьСтроку(ТекстПолученияОборотов);
					
					Для каждого СтрокаОтбора из ДанныеПодстановки.Отборы Цикл
						
						ТекстФункций.ДобавитьСтроку("");
						ТекстШаг = СтрШаблон("Шаг = ""Проверка оборотов по регистру бухгалтерии '%1' по счету '%2'"";", СтрокаДерева.ТипОбъекта, Строка(СтрокаОтбора.Счет));
						ТекстФункций.ДобавитьСтроку(ТекстШаг); 
						
						
						МассивТекстовОтбораРезультата = Новый Массив;
						МассивТекстовОтбораРезультата.Добавить("ОтборРезультат = Новый Структура();");
						
						МассивТекстовРесурсовРезультата = Новый Массив;
						МассивТекстовРесурсовРезультата.Добавить("ОтборРесурсов = Новый Структура();");
						
						МассивТекстовОтбораРезультата.Добавить(
						СтрШаблон("ОтборРезультат.Вставить(""Счет"", СчетаОтбора[""%1""]);", Строка(СтрокаОтбора.Счет)));
						
						
						
						Для каждого Отбор из СтрокаОтбора.Измерения Цикл
							
							МассивТекстовОтбораРезультата.Добавить(
							СтрШаблон("ОтборРезультат.Вставить(""%1"", %2.%3);", 
							Отбор.Ключ,
							ИмяСтуркутрыВходящихДанных,
							УникальноеИмяПеременнойПоСсылке(Отбор.Значение, МассивИспользованныхИменПеременных)));
							
						КонецЦикла;
						
						Для каждого Отбор из СтрокаОтбора.Ресурсы Цикл
							
							ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(
							Отбор.Значение, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
							
							МассивТекстовРесурсовРезультата.Добавить(
							СтрШаблон("ОтборРесурсов.Вставить(""%1"", %2);", 
							Отбор.Ключ,
							ПредставлениеЗначения.СтроковоеПредставление)); 
							
						КонецЦикла; 	
						
						ТекстФункций.ДобавитьСтроку("");
						
						ТекстФункций.ДобавитьСтроку(СтрСоединить(МассивТекстовОтбораРезультата, Символы.ПС));
						ТекстФункций.ДобавитьСтроку("");
						ТекстФункций.ДобавитьСтроку(СтрСоединить(МассивТекстовРесурсовРезультата, Символы.ПС));
						
						
						ТекстФункций.ДобавитьСтроку("");
						ТекстФункций.ДобавитьСтроку(ТекстРезультат);
						ТекстФункций.ДобавитьСтроку("");
						
					КонецЦикла;
					
					
					
				КонецЕсли;       		                			
				
				
			ИначеЕсли СведенияОКоманде.ТипУзла = "Родительский" Тогда 
				
				Контекст = Новый Структура();
				Контекст.Вставить("ПеременнаяОбъекта", "ДокументОбъект");
				Контекст.Вставить("ИмяСтуркутрыВходящихДанных", "СтруктураВходящихДанных");
				
				Если СтрокаДерева.Команда = "ПолучитьДокументИзСтруктуры" Тогда
					
					ПредставлениеСсылкиОбъекта = УникальноеИмяПеременнойПоСсылке(СтрокаДерева.ОбъектКоманды, МассивИспользованныхИменПеременных);
					
					ТекстФункций.ДобавитьСтроку(
						СтрШаблон("ДокументОбъект = %1.%2.ПолучитьОбъект();",
						ИмяСтуркутрыВходящихДанных,
						ПредставлениеСсылкиОбъекта));
					
					ТекстФункций.ДобавитьСтроку(""); 				
					
				ИначеЕсли СтрокаДерева.Команда = "СоздатьДокумент" Тогда
											
					ДанныеОбъекта = ПолучитьДанныеИзХранилища(СтрокаДерева.ПараметрыХранилище, "СоздатьДокумент");
					ИмяМетаданного = Метаданные.НайтиПоТипу(ТипЗнч(ДанныеОбъекта.СсылкаНаОбъект)).Имя; 
					
					ТекстФункций.ДобавитьСтроку(СтрШаблон("%1 = Документы.%2.СоздатьОбъект();", Контекст.ПеременнаяОбъекта, ИмяМетаданного));
					
					Для Каждого Реквизит Из ДанныеОбъекта.Реквизиты Цикл
						
						Если Не ЗначениеЗаполнено(Реквизит.ЗначениеРеквизита) Тогда
							Продолжить;	
						КонецЕсли;
						
						ПредставлениеРеквизита = ПолучитьПредставлениеОбъектаКоманды(Реквизит.ЗначениеРеквизита, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
						               											
						ТекстФункций.ДобавитьСтроку(СтрШаблон("%1.%2 = %3;", Контекст.ПеременнаяОбъекта, Реквизит.ИмяРеквизита, ПредставлениеРеквизита.СтроковоеПредставление));
		
					КонецЦикла;
					
					ТекстФункций.ДобавитьСтроку("");  
					
					Для Каждого	ТаблицаДанных Из ДанныеОбъекта.ТаблицыДанных Цикл
						
						ТекстФункций.ДобавитьСтроку(СтрШаблон("НоваяСтрока = %1.%2.Добавить();", Контекст.ПеременнаяОбъекта, ТаблицаДанных.ИмяТаблицы));
						
						Для каждого СтрокаДанныхТаблицы из ТаблицаДанных.ДанныеТаблицы Цикл
							                				                     							
							Для Каждого КолонкаТаблицы Из ТаблицаДанных.ДанныеТаблицы.Колонки Цикл 
								
								ЗначениеРеквизита = СтрокаДанныхТаблицы[КолонкаТаблицы.Имя];
								
								Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
									Продолжить;
								КонецЕсли;
																
								ПредставлениеРеквизита = ПолучитьПредставлениеОбъектаКоманды(ЗначениеРеквизита, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
							
								ТекстФункций.ДобавитьСтроку(СтрШаблон("НоваяСтрока.%1 = %2;", КолонкаТаблицы.Имя, ПредставлениеРеквизита.СтроковоеПредставление));
							
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЦикла;

					
					ТекстФункций.ДобавитьСтроку("");
					
					Текст = СтрШаблон("ВыполнитьПроведениеДокумента(%1, Истина);", Контекст.ПеременнаяОбъекта);
					ТекстФункций.ДобавитьСтроку(Текст);
					
					ТекстФункций.ДобавитьСтроку("");				
										
				КонецЕсли;
				
				Для каждого ПодчиненнаяСтрока из СтрокаДерева.Строки Цикл
					
					Если ПодчиненнаяСтрока.ИдентификаторКоманды = "КоличествоСтрокТаблицыОбъекта" Тогда
						
						
						Текст = "Ожидаем.Что(%1.%2.Количество(), ""Количество записей табличной части '%2'"").Равно(%3);";
						
						Текст = СтрШаблон(Текст, 
						Контекст.ПеременнаяОбъекта,
						ПодчиненнаяСтрока.ТипОбъекта,
						ПодчиненнаяСтрока.ОбъектКоманды);
						
						ТекстФункций.ДобавитьСтроку(Текст);
						ТекстФункций.ДобавитьСтроку("");
						
					ИначеЕсли ПодчиненнаяСтрока.ИдентификаторКоманды = "КоличествоДвиженийПоРегистру" Тогда
						
						Текст = "Ожидаем.Что(%1.Движения.%2.Количество(), ""Количество движений по '%3'"").Равно(%4);";
						
						ИмяРегистра = СтрРазделить(ПодчиненнаяСтрока.ТипОбъекта, ".")[1]; 
						
						Текст = СтрШаблон(Текст, 
						Контекст.ПеременнаяОбъекта,
						ИмяРегистра,
						ПодчиненнаяСтрока.ТипОбъекта,
						ПодчиненнаяСтрока.ОбъектКоманды);
						
						ТекстФункций.ДобавитьСтроку(Текст);
						ТекстФункций.ДобавитьСтроку("");
						
					ИначеЕсли ПодчиненнаяСтрока.ИдентификаторКоманды = "ЗначениеРеквизитаОбъекта" Тогда
						
						
						ПредставлениеОбъектаКоманды = ПолучитьПредставлениеОбъектаКоманды(ПодчиненнаяСтрока.ОбъектКоманды, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
						
						Текст = "Ожидаем.Что(%1.%2, ""Значение реквизита '%2' "").Равно(%3);";
						
						Текст = СтрШаблон(Текст, 
						Контекст.ПеременнаяОбъекта,
						ПодчиненнаяСтрока.ТипОбъекта,
						ПредставлениеОбъектаКоманды.СтроковоеПредставление);
						
						ТекстФункций.ДобавитьСтроку(Текст);
						ТекстФункций.ДобавитьСтроку("");
						
						
					ИначеЕсли ПодчиненнаяСтрока.ИдентификаторКоманды = "ЗаписатьИПровестиПоУУ" Тогда
						
						
						Текст = "ВыполнитьПроведениеДокумента(%1, %2);";
						
						Текст = СтрШаблон(Текст, 
						Контекст.ПеременнаяОбъекта,
						"Истина");
						
						ТекстФункций.ДобавитьСтроку(Текст);
						ТекстФункций.ДобавитьСтроку("");
						
						
					ИначеЕсли ПодчиненнаяСтрока.ИдентификаторКоманды = "ЗаписатьИПровестиБезУУ" Тогда
						
						Текст = "ВыполнитьПроведениеДокумента(%1, %2);";
						
						Текст = СтрШаблон(Текст, 
						Контекст.ПеременнаяОбъекта,
						"Ложь");
						
						ТекстФункций.ДобавитьСтроку(Текст);
						ТекстФункций.ДобавитьСтроку("");
						
					ИначеЕсли ПодчиненнаяСтрока.ИдентификаторКоманды = "Записать" Тогда
						
						Текст = "%1.Записать();";
						
						Текст = СтрШаблон(Текст, 
						Контекст.ПеременнаяОбъекта);
						
						ТекстФункций.ДобавитьСтроку(Текст);
						ТекстФункций.ДобавитьСтроку("");
						
						
					ИначеЕсли ПодчиненнаяСтрока.ИдентификаторКоманды = "ВыполнитьМетодОбъекта" Тогда
						
						Текст = "%1.%2;";
						
						Текст = СтрШаблон(Текст, 
						Контекст.ПеременнаяОбъекта,
						ПодчиненнаяСтрока.ТипОбъекта);
						
						ТекстФункций.ДобавитьСтроку(Текст);
						ТекстФункций.ДобавитьСтроку("");
						
						
					КонецЕсли;
					
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстФункций.ДобавитьСтроку("КонецПроцедуры");
		
		
	КонецЦикла;
	
	
	ТекстШаблонаМодуля = СтрЗаменить(ТекстШаблонаМодуля, "###ШАБЛОН_ПРОЦЕДУРЫ_ТЕСТОВ###", ТекстФункций.ПолучитьТекст());
	
	
	
	
	ТекстСлужебныеПроцедурыИФункции = Новый Массив;
	
	ИменаСлужебныхПроцедурИФункций = Новый Массив;
	
	Для Каждого СлужебнаяПроцедура из ТаблицаСлужебныхПроцедурыИФункции Цикл
		
		ЗавершениеМетода = ?(СлужебнаяПроцедура.ТипМетода = "Процедура", "КонецПроцедуры", "КонецФунции");
		
		ИмяМетода = СгенерироватьУникальноеИмяМетода(ИменаСлужебныхПроцедурИФункций, СлужебнаяПроцедура);
		ИмяМетодаСПараметрами = ИмяМетода + "(" + СлужебнаяПроцедура.ПараметрыМетода + ")";
		
		ТекстШаблонаМодуля = СтрЗаменить(ТекстШаблонаМодуля, СлужебнаяПроцедура.Ид, ИмяМетодаСПараметрами + ";");
		
		
		
		ПолноеИмяМетода = СлужебнаяПроцедура.ТипМетода + " " + ИмяМетодаСПараметрами; 
		
		ТекстСлужебныеПроцедурыИФункции.Добавить("");
		ТекстСлужебныеПроцедурыИФункции.Добавить(ПолноеИмяМетода);
		ТекстСлужебныеПроцедурыИФункции.Добавить("");
		ТекстСлужебныеПроцедурыИФункции.Добавить(СлужебнаяПроцедура.ТекстМетода);
		ТекстСлужебныеПроцедурыИФункции.Добавить("");
		ТекстСлужебныеПроцедурыИФункции.Добавить(ЗавершениеМетода);
		
	КонецЦикла;
	
	
	ТекстШаблонаМодуля = СтрЗаменить(ТекстШаблонаМодуля, "###ШАБЛОН_СЛУЖЕБНЫЕПРОЦЕДУРЫИФУНКЦИИ_ТЕСТОВ###", СтрСоединить(ТекстСлужебныеПроцедурыИФункции, Символы.ПС));
	ТекстМодуля.ДобавитьСтроку(ТекстШаблонаМодуля);
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьУникальноеИмяМетода(ИменаСлужебныхПроцедурИФункций, ДанныеМетода, ИндексМетода = 0)
	
	ТекстПостФикс = ?(ИндексМетода = 0, "", "_" + ИндексМетода);
	
	ВременноеИмя = ДанныеМетода.ПрефиксМетода + "_" + ДанныеМетода.ИмяМетода + ТекстПостФикс;
	
	Если ИменаСлужебныхПроцедурИФункций.Найти(ВременноеИмя) <> Неопределено Тогда
		ИндексМетода = ИндексМетода + 1;
		ВременноеИмя = СгенерироватьУникальноеИмяМетода(ИменаСлужебныхПроцедурИФункций, ДанныеМетода,  ИндексМетода);			
	КонецЕсли;
	
	ИменаСлужебныхПроцедурИФункций.Добавить(ВременноеИмя);
	
	Возврат ВременноеИмя;	
		
	
КонецФункции

&НаСервере
Функция ПолучитьСведенияОКоманде(Ид)
	
	Результат = Новый Структура("ТипУзла, ОписаниеТипов, ОграничениеТипа, СпециальныйТип, Представление",
		Новый ОписаниеТипов(Неопределено), Ложь, "");
	
	НайденныеСтроки = ДостпныеКоманды.НайтиСтроки(
		Новый Структура("ИдентификаторКоманды", Ид));
		
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, НайденныеСтроки[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначениеРеквизитаОбъекта(ОбъектГлавногоУзла, ВыбранноеЗначение)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектГлавногоУзла, ВыбранноеЗначение); 

КонецФункции

&НаСервере
Функция ТекстКоманды_ДанныеРегистраСведений(ИмяСтуркутрыВходящихДанных, СтрокаДерева, ДанныеРегистра, МассивИспользованныхИменПеременных)
	
	ТекстФункций = Новый Массив;
	
		
	ТекстШаг = СтрШаблон("Шаг = ""Добавление записей в независимый регистр сведений '%1'"";", СтрокаДерева.ТипОбъекта);
	ТекстФункций.Добавить(ТекстШаг);
	ТекстФункций.Добавить("");
	
	СтрокаНаборЗаписей = СтрШаблон("НаборЗаписейРегистра = РегистрыСведений.%1.СоздатьНаборЗаписей();", ДанныеРегистра.ИмяРегистра);
	
	ТекстФункций.Добавить(СтрокаНаборЗаписей);
	ТекстФункций.Добавить("");
	
	ТекстНовойЗаписи = "ЗаписьРегистра = НаборЗаписейРегистра.Добавить();";
	                                        	
	СтрокаЗаписьРегистра = "ЗаписьРегистра.%1 = %2;";
	
	Для каждого Запись Из ДанныеРегистра.ТаблицаДанных Цикл
		
		СтрокиДляЗаписи = Новый Массив;
		
		Для каждого КолонкаЗаписи Из ДанныеРегистра.ТаблицаДанных.Колонки Цикл
			
			Значение = Запись[КолонкаЗаписи.Имя];
			
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			
			ПредставлениеЗначения = ПолучитьПредставлениеОбъектаКоманды(Значение, ИмяСтуркутрыВходящихДанных, МассивИспользованныхИменПеременных);
			ТекстСтроки =  СтрШаблон(СтрокаЗаписьРегистра, КолонкаЗаписи.Имя, ПредставлениеЗначения.СтроковоеПредставление); 
			
			СтрокиДляЗаписи.Добавить(ТекстСтроки);
			
		КонецЦикла;
		
		Если СтрокиДляЗаписи.Количество() > 0 Тогда
			
			ТекстФункций.Добавить(ТекстНовойЗаписи);
			ТекстФункций.Добавить("");
			
			ТекстФункций.Добавить(
			СтрСоединить(СтрокиДляЗаписи, Символы.ПС));
			
			ТекстФункций.Добавить("");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстФункций.Добавить("");					
	ТекстФункций.Добавить("НаборЗаписейРегистра.Записать(Истина);");
	ТекстФункций.Добавить("");
	       	
	Возврат СтрСоединить(ТекстФункций, Символы.ПС);
	       	
КонецФункции

#КонецОбласти

#Область КодМодуляОбъектаСериализаторMXL

Функция УникальноеИмяПеременнойПоСсылке(Знач Ссылка, МассивИмен)
	
	СтрокиПоСсылке = ТаблицаИспользованныхСсылочныхОбъектов.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
	
	Если СтрокиПоСсылке.Количество() > 0 Тогда 
		
		Возврат СтрокиПоСсылке[0].ИмяПеременной;
		
	КонецЕсли;
		
	ИмяПеременной = ПолучитьИдентификаторПредставленияПоСсылке(Ссылка);
	ИмяПеременной = ПолучитьУникальноеИмяПеременной(МассивИмен, ИмяПеременной);
	МассивИмен.Добавить(НРег(ИмяПеременной));
	
	НоваяСтрока = ТаблицаИспользованныхСсылочныхОбъектов.Добавить();			
	НоваяСтрока.ИмяПеременной = ИмяПеременной;
	НоваяСтрока.Ссылка = Ссылка;
	
	Возврат ИмяПеременной;
КонецФункции

Функция ПолучитьУникальноеИмяПеременной(МассивИмен, Знач Имя)
	Если Не ЗначениеЗаполнено(МассивИмен) Тогда
		Возврат Имя;
	КонецЕсли;
	
	ПоменялиИмя = Ложь;
	Индекс = 1;
	ИсходноеИмя = Имя + "_"; // для генерации нормальных имен типа Перем_1, Перем_2, Перем_3
	Пока МассивИмен.Найти(НРег(Имя)) <> Неопределено Цикл
		Имя = ИсходноеИмя + Индекс;
		Индекс = Индекс + 1;
		ПоменялиИмя = Истина;
	КонецЦикла;
	Возврат Имя;
КонецФункции

Функция ПолучитьИдентификаторПредставленияПоСсылке(Ссылка) 
	
	Мд = Ссылка.Метаданные();
	
	менеджерОбъекта = ПолучитьМенеджерОбъекта_ирЛкс(Мд);
	КорневойТипКонфигурации = ПолучитьКорневойТипКонфигурации_ирЛкс(Мд);
	
	Представление = "";
	Если КорневойТипКонфигурации = "Справочник" Тогда
		Если Ссылка.Метаданные().ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеНаименования Тогда
			Представление = Ссылка.Наименование;
		Иначе
			Представление = Ссылка.Код;
		КонецЕсли;
	ИначеЕсли КорневойТипКонфигурации = "Документ" Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = "БизнесПроцесс" Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = "Задача" Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = "ПланОбмена" Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = "ПланВидовХарактеристик" Тогда
		Представление = ""+Ссылка;
	ИначеЕсли КорневойТипКонфигурации = "ПланСчетов" Тогда
		Представление = ""+Ссылка;
	Иначе
		ВызватьИсключение "ПолучитьИдентификаторПредставленияПоСсылке() : Неизвестный КорневойТипКонфигурации <"+КорневойТипКонфигурации+">";
	КонецЕсли;
	Результат = ПолучитьИдентификаторИзПредставления_Лкс(Представление, "_");
	Возврат Результат;
	
КонецФункции

// Получает менеджер по описанию типов, типу, метаданным, ссылке или объекту. На базе метода ЛксПолучитьМенеджер
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем менеджер.
//
// Возвращаемое значение:
//               – МенеджерОбъекта - для ссылки или ссылочного типа;
//  Неопределено - не удалось получить.
//
Функция ПолучитьМенеджерОбъекта_ирЛкс(пОбъект) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
		МетаданныеОбъекта = пОбъект;
	Иначе
		МетаданныеОбъекта = ПолучитьМетаданные_ирЛкс(пОбъект);
	КонецЕсли;
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МассивФрагментов = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(МетаданныеОбъекта.ПолноеИмя());
	КорневойТип = МассивФрагментов[0];
	Менеджер = Неопределено;
	Если Истина
		И МассивФрагментов.Количество() = 4 
		И КорневойТип = "ВнешнийИсточникДанных" 
	Тогда
		ИмяТипаМенеджера = МассивФрагментов[0] + "ТаблицаМенеджер." + МассивФрагментов[1] + "." + МассивФрагментов[3];
	Иначе
		//КорневойТип = ЛксПолучитьКорневойТипКонфигурации(МетаданныеОбъекта, Истина); // Изменил 02.03.2012
		Если КорневойТип <> Неопределено Тогда
			ИмяТипаМенеджера = КорневойТип + "Менеджер." + МетаданныеОбъекта.Имя;
		Иначе
			ИмяТипаМенеджера = "Неопределено";
		КонецЕсли;
	КонецЕсли;
	Попытка
		Менеджер = Новый (ИмяТипаМенеджера);
	Исключение
	КонецПопытки;
	Возврат Менеджер;

КонецФункции // ЛксПолучитьМенеджер()

// Получает идентификатор из любой строки.
// "3-я Дебиторка По контрагентам с интервалами СНГ (для  Руководства)" => "_3_яДебиторкаПоКонтрагентамСИнтерваламиСНГ_дляРуководства_".
//
// Параметры:
//  Представление – Строка.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьИдентификаторИзПредставления_Лкс(Знач Представление, ЗаменаПустойСтроки = "_") Экспорт
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = ЗаменаПустойСтроки;
	КонецЕсли;
	Если СокрЛП(Представление) = Представление и Найти(Представление, ",") = 0 Тогда
		Попытка
			Пустышка = Новый Структура(Представление);
			Возврат Представление;
		Исключение КонецПопытки;
	КонецЕсли; 
	НовоеПредставление = СокрЛП(Представление);
	ПервыйСимвол = Сред(НовоеПредставление, 1, 1);
	Если ЭтоЦифра(ПервыйСимвол) Тогда
		НовоеПредставление = "_" + НовоеПредставление;
	КонецЕсли;
	ПредыдущийСимвол = " ";
	ТекущаяСтрока = "";
	Для Счетчик = 1 По СтрДлина(НовоеПредставление) Цикл
		ТекущийСимвол = Сред(НовоеПредставление, Счетчик, 1);
		Если ЭтоПробельныйСимвол(ПредыдущийСимвол) Тогда
			// Предыдущий символ - непечатаемый
			ТекущийСимвол = ВРег(ТекущийСимвол);
		КонецЕсли;
		Если ЭтоВалидныйСимволИдентификатора(ТекущийСимвол) Тогда
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		ИначеЕсли Не ЭтоПробельныйСимвол(ТекущийСимвол) Тогда
			ТекущаяСтрока = ТекущаяСтрока + "_";
		КонецЕсли;
		ПредыдущийСимвол = ТекущийСимвол;
		
	КонецЦикла;
	Результат = ТекущаяСтрока;
	Возврат ТекущаяСтрока;

КонецФункции // ПолучитьИдентификаторИзПредставления()

Функция ЭтоЦифра(Символ)
	
	Возврат (Найти("0123456789", Символ) > 0);
	
КонецФункции

Функция ЭтоПробельныйСимвол(Символ)
	
	ПробельныеСимволы = " " + Символы.Таб + Символы.НПП + Символы.ВК + Символы.ВТаб + Символы.ПС + Символы.ПФ;
	Возврат (Найти(ПробельныеСимволы, Символ) > 0)
	
КонецФункции

Функция ЭтоВалидныйСимволИдентификатора(Символ)
	
	Алфавит = "_АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Возврат (Найти(Алфавит, ВРег(Символ)) > 0 Или ЭтоЦифра(Символ));
	
КонецФункции

// { БЛОК МЕТОДОВ ИЗ ИР (Инструменты Разработчика, автор TormozIt )
//
// Определяет корневой тип конфигурации по описанию типов, типу, метаданным, ссылке или объекту.
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем метаданные;
//  *пЛиТолькоДляКорневого - Булево, *Ложь - возвращать только для объекта корневого типа.
//
// Возвращаемое значение:
//               - Строка – имя типа корневого объекта метаданных;
//  Неопределено - не удалось получить имя типа.
//
Функция ПолучитьКорневойТипКонфигурации_ирЛкс(пОбъект, пЛиТолькоДляКорневого = Ложь) Экспорт

	Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
		МетаданныеТипа = пОбъект;
	Иначе
		МетаданныеТипа = ПолучитьМетаданные_ирЛкс(пОбъект);
	КонецЕсли;
	Результат = Неопределено;
	Если МетаданныеТипа <> Неопределено Тогда
		ПолноеИмя = МетаданныеТипа.ПолноеИмя();
		Если пЛиТолькоДляКорневого Тогда 
			МассивФрагментов = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(ПолноеИмя);
			Если МассивФрагментов.Количество() = 2 Тогда
				Результат = МассивФрагментов[0];
			КонецЕсли;
		Иначе
			Результат = ПолучитьПервыйФрагмент_ирЛкс(ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	Если Результат = "ТабличнаяЧасть" Тогда
		// Баг платформы. У внешних метаданных полное имя не включает сам внешний метаобъект
		Результат = Неопределено;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции // ЛксПолучитьКорневойТипКонфигурации()

// Функция разбивает строку разделителем. На базе ЛксПолучитьМассивИзСтрокиСРазделителем
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *ОбрезатьНепечатныеСимволы - Булево, *Ложь - делать СокрЛП.
//  *ОставлятьПустуюСтроку - Булево, *Истина - если передана пустая строка, то добавлять ее в массив.
//
// Возвращаемое значение:
//  Массив - фрагментов.
//
Функция ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(Знач Стр, Разделитель = ".", ОбрезатьНепечатныеСимволы = Ложь, ОставлятьПустуюСтроку = Истина) Экспорт
	
	МассивСтрок = Новый Массив;
	Если Истина
		И Не ОставлятьПустуюСтроку 
		И ПустаяСтрока(Стр)
	Тогда
		Возврат МассивСтрок;
	КонецЕсли; 
	
	//лСтрока = СтрЗаменить(Стр, Разделитель, Символы.ПС);
	//// Баг платформы. СтрЧислоСтрок не учитывает терминальный перевод строки.
	//ЧислоСтрок = СтрЧислоСтрок(лСтрока + " ");
	//Для Счетчик = 1 По ЧислоСтрок Цикл 
	//	Фрагмент = СтрПолучитьСтроку(лСтрока, Счетчик);
	//	Если ОбрезатьНепечатныеСимволы Тогда
	//		Фрагмент = СокрЛП(Фрагмент);
	//	КонецЕсли;
	//	МассивСтрок.Добавить(Фрагмент);
	//КонецЦикла;
	
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				Фрагмент = Стр;
				Если ОбрезатьНепечатныеСимволы Тогда
					Фрагмент = СокрЛП(Фрагмент);
				КонецЕсли;
				МассивСтрок.Добавить(Фрагмент);
				Возврат МассивСтрок;
			КонецЕсли;
			Фрагмент = Лев(Стр,Поз-1);
			Если ОбрезатьНепечатныеСимволы Тогда
				Фрагмент = СокрЛП(Фрагмент);
			КонецЕсли;
			МассивСтрок.Добавить(Фрагмент);
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивСтрок;
		
КонецФункции // ЛксПолучитьМассивИзСтрокиСРазделителем()

// Получает метаданные по полному имени, описанию типов, типу, ссылке или объекту. На базе ЛксПолучитьМетаданные
// Для описания типов берется первый тип массива типов.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем метаданные.
//
// Возвращаемое значение:
//               – Метаданные - полученные;
//  Неопределено - не удалось получить метаданные.
//
Функция ПолучитьМетаданные_ирЛкс(пОбъект) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("Строка") Тогда
		Если ПустаяСтрока(пОбъект) Тогда
			Результат = Неопределено;
		Иначе
			Фрагменты = ПолучитьМассивИзСтрокиСРазделителем_ирЛкс(пОбъект);
			Если Фрагменты.Количество() = 3 Тогда
				// ВидыСубконто, Изменения
				ПолноеИмяМД = Фрагменты[0] + "." + Фрагменты[1];
			Иначе
				ПолноеИмяМД = пОбъект;
			КонецЕсли; 
			Результат = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	ТипОбъекта = ПолучитьТипОбъекта_ирЛкс(пОбъект);
	Результат = Метаданные.НайтиПоТипу(ТипОбъекта);
	Возврат Результат;
	
КонецФункции // ЛксПолучитьМетаданные()

// Получает тип из описания типов, типа или значения. На базе ЛксПолучитьТипОбъекта
//
// Параметры:
//  пОбъект    – Тип, ОписаниеТипов, Произвольный – проверяемое значение.
//
// Возвращаемое значение:
//  Тип - найденный тип.
//
Функция ПолучитьТипОбъекта_ирЛкс(пОбъект)

	ТипОбъекта = Тип("Неопределено");
	ТипПараметра = ТипЗнч(пОбъект);
	Если ТипПараметра = Тип("ОписаниеТипов") Тогда
		Если пОбъект.Типы().Количество() > 0 Тогда 
			ТипОбъекта = пОбъект.Типы()[0];
		КонецЕсли;
	ИначеЕсли ТипПараметра <> Тип("Тип") Тогда 
		ТипОбъекта = ТипПараметра;
	Иначе
		ТипОбъекта = пОбъект;
	КонецЕсли;
	
	Возврат ТипОбъекта;

КонецФункции // ЛксПолучитьТипОбъекта()

// Получает первый фрагмент, отделяемый разделителем от строки. На базе ЛксПолучитьПервыйФрагмент
// Написана для оптимизации по скорости.
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка, "." - символ-разделитель;
//  *пЛиИспользоватьГраницуЕслиМаркерНеНайден - Булево, *Истина.
//
// Возвращаемое значение:
//               - Строка - первый фрагмент строки;
//  Неопределено - в строке не обнаружен разделитель.
//
Функция ПолучитьПервыйФрагмент_ирЛкс(пСтрока, пРазделитель = ".",
	пЛиИспользоватьГраницуЕслиМаркерНеНайден = Истина) Экспорт

	Позиция = Найти(пСтрока, пРазделитель);
	Если Позиция > 0 Тогда
		Возврат Лев(пСтрока, Позиция - 1);
	Иначе
		Если пЛиИспользоватьГраницуЕслиМаркерНеНайден Тогда 
			Возврат пСтрока;
		Иначе
			Возврат пСтрока;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЛксПолучитьПервыйФрагмент()

&НаСервере
Функция ДанныеДляСохраненияНабораТестовНаСервере()

	ВТаблицуЗначенийНаСервере(ТекущийИдентификаторТеста);
	
	ЗаписьXML = Новый ЗаписьXML;

    ЗаписьXML.УстановитьСтроку();
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("Версия", "1.0");
	ДанныеДляЗаписи.Вставить("НаборТестовИмя", НаборТестовИмя);
	ДанныеДляЗаписи.Вставить("ШагиСценария", ШагиСценария.Выгрузить());
	ДанныеДляЗаписи.Вставить("Тесты", Тесты.Выгрузить());
	
    СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеДляЗаписи);
	                           		
    СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаборТестов(Команда)
	
	ЗаписьXML = Новый ТекстовыйДокумент;
	ЗаписьXML.УстановитьТекст(ДанныеДляСохраненияНабораТестовНаСервере());
		
	ЗаписьXML.Записать(Объект.КаталогВыгрузки + "\" + НаборТестовИмя + ".xml", "UTF-8");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНаборТестов(Команда)
	
	ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработатьВыбранныеФайлыНаборТестов", ЭтаФорма);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок     	   = "Выберите файл: ";
	ДиалогОткрытияФайла.Фильтр 		 	   = "Текст(*.XML)|*.XML";
	
	НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, ЭтаФорма.УникальныйИдентификатор);

	
КонецПроцедуры

&НаКлиенте
Процедура ТестНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокИдентификаторовТестов());
	
	ДанныеВыбора = Новый СписокЗначений();
	ДанныеВыбора.ЗагрузитьЗначения(СписокИдентификаторовТестов());
		
	//Элемент.СписокВыбора
	
КонецПроцедуры

&НаСервере
Функция СписокИдентификаторовТестов()
	
	Возврат Тесты.Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

&НаКлиенте
Процедура ТестПриИзменении(Элемент)
	
	ВТаблицуЗначенийНаСервере(ТекущийИдентификаторТеста);
	
	ТекущийИдентификаторТеста = Тест;
	
	ВДеревоЗначенийНаСервере(ТекущийИдентификаторТеста);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЩагиСценарияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(ТекущийИдентификаторТеста) Тогда
		Отказ = Истина;	
	КонецЕсли;
		
КонецПроцедуры

  
#КонецОбласти

Кэш = Новый Соответствие();

ИдОстаткиПоРегиструНакопления = "ОстаткиПоРегиструНакопления";
ИдОборотыПоРегиструНакопления = "ОборотыПоРегиструНакопления";
ИдОстаткиПоРегиструБухгалтерии = "ОстаткиПоРегиструБухгалтерии";
ИдОборотыПоРегиструБухгалтерии = "ОборотыПоРегиструБухгалтерии";

ИдДанныеРегистраСведений = "ДанныеРегистраСведений";



